#ifndef MARCHING_CUBES_H
#define MARCHING_CUBES_H

#include "marching_cubes/signed_distance_functions.h"

#include "glm/glm.hpp"

#include <vector>

/*
 * Returns the interpolated position for a vertex lying between two sample
 * points.
 */
glm::vec3 interpolateVertex(glm::vec4 corner1, glm::vec4 corner2,
        float isolevel);

/*
 * Returns a numerical approximation of a vertex's normal using the
 * tetrahedron technique described at Inigo Quilez's website.
 */
glm::vec3 vertexNormal(SignedDistanceFunction* sdf, glm::vec3 vertex);

/*
 * Stores the vertices and normals generated by a single sampling cube in a
 * vertex buffer for rendering with OpenGL.
*/
void polygonize(SignedDistanceFunction* sdf, glm::vec3 center,
        glm::vec3 radius, float isolevel,
        std::vector<glm::vec3> &vertexBufferData);

/*
 * Returns a vertex buffer representing the zero-isosurface of an SDF.
 */
void marchingCubes(SignedDistanceFunction* sdf, glm::vec3 min, glm::vec3 max,
        int resolution, std::vector<glm::vec3> &vertexBufferData);

#endif
